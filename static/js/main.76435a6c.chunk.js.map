{"version":3,"sources":["components/CharacterOutput.js","components/generateButton.js","containers/App.js","serviceWorker.js","index.js"],"names":["Character","character","console","log","className","options","max","id","name","height","mass","skin_color","eye_color","birth_year","gender","homeworld","GenerateButton","onButtonSubmit","onClick","App","randNumber","Math","floor","random","toString","randomChar","fetch","then","resp","json","result","setState","state","CharacterOutput","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0RAyBeA,EApBG,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAElB,OADAC,QAAQC,IAAIF,GAEV,kBAAC,IAAD,CAAMG,UAAY,oBAAoBC,QAAW,CAAEC,IAAK,KACtD,6BAASC,GAAK,gBAAgBH,UAAU,yEACtC,6BACE,sCAAYH,EAAUO,MACtB,uCAAaP,EAAUQ,QACvB,qCAAWR,EAAUS,MACrB,0CAAgBT,EAAUU,YAC1B,0CAAgBV,EAAUW,UAA1B,KACA,2CAAiBX,EAAUY,WAA3B,KACA,uCAAaZ,EAAUa,OAAvB,KACA,4CAAkBb,EAAUc,eCLvBC,EAVQ,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eACvB,OACE,6BACE,4BAAQb,UAAW,qDACXc,QAAWD,GADnB,6BCwCSE,E,YArCb,aAAc,IAAD,8BACX,+CAaAF,eAAiB,WACf,IAAMG,EAAcC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAgBC,WAC9CC,EAAa,+BAAiCL,EAAa,IACjElB,QAAQC,IAAIiB,GACZlB,QAAQC,IAAIsB,GACZC,MAAMD,GAAYE,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UACnCF,MAAK,SAAAG,GAAU,EAAKC,SAAS,CAAC9B,UAAW6B,QAlB5C,EAAKE,MAAQ,CACX/B,UAAW,IAHF,E,sEA2BX,OAFAC,QAAQC,IAAI,UAGR,yBAAKC,UAAW,UACd,wBAAIA,UAAW,MAAf,kBACA,wBAAIA,UAAW,MAAf,aACA,kBAAC6B,EAAD,CAAiBhC,UAAaiC,KAAKF,MAAM/B,YACzC,kBAAC,EAAD,CAAgBgB,eAAkBiB,KAAKjB,sB,GAlC/BkB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,a","file":"static/js/main.76435a6c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './characterOutput.css'\r\nimport Tilt from 'react-tilt'\r\n\r\n\r\nconst Character = ({character}) => {\r\n  console.log(character)\r\n  return(\r\n    <Tilt className = \"Tilt br2 shadow-2\" options = {{ max: 20 }} >\r\n      <article id = 'charactercard' className=\"br5 ba  bw3 b--yellow -10 mv4 w-200 w-50-m w-25-l mw6 center shadow-5\">\r\n        <div>\r\n          <p> Name : {character.name}</p>\r\n          <p> Height: {character.height}</p>\r\n          <p> Mass: {character.mass}</p>\r\n          <p> Skincolor: {character.skin_color}</p>\r\n          <p> Eye color: {character.eye_color} </p>\r\n          <p> Birth year: {character.birth_year} </p>\r\n          <p> Gender: {character.gender} </p>\r\n          <p> Home World : {character.homeworld}</p>\r\n\r\n        </div>\r\n      </article>\r\n    </Tilt>\r\n  )\r\n}\r\nexport default Character\r\n","import React from 'react';\r\n\r\n\r\nconst GenerateButton = ({onButtonSubmit}) => {\r\n  return(\r\n    <div>\r\n      <button className =\" br2 w-15 grow f4 link ph3 pv2 dib black bg-yellow\"\r\n              onClick = {onButtonSubmit}\r\n      >Generate New Character!\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\nexport default GenerateButton\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport CharacterOutput from '../components/CharacterOutput'\r\nimport GenerateButton from '../components/generateButton'\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      character: []\r\n    }\r\n  }\r\n\r\n  // componentDidMount(){\r\n  //     fetch('https://swapi.co/api/people/1/').then(resp => resp.json())\r\n  //     .then(result =>{this.setState({character: result})})\r\n  //   }\r\n\r\n\r\n\r\n    onButtonSubmit = () =>{\r\n      const randNumber =  Math.floor(Math.random() * 100).toString();\r\n      const randomChar = 'https://swapi.co/api/people/' + randNumber + '/'\r\n      console.log(randNumber)\r\n      console.log(randomChar)\r\n      fetch(randomChar).then(resp => resp.json())\r\n      .then(result =>{this.setState({character: result})})\r\n    }\r\n\r\n\r\n  render(){\r\n    console.log('Render')\r\n\r\n    return (\r\n        <div className ='App tc'>\r\n          <h1 className ='f1'> Star Wars API</h1>\r\n          <h2 className ='f3'> Details </h2>\r\n          <CharacterOutput character = {this.state.character}/>\r\n          <GenerateButton onButtonSubmit = {this.onButtonSubmit}/>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}